// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`created_at`", "`updated_at`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`created_at`", "`updated_at`"), "=?,") + "=?"

	cacheTestDBOrderIdPrefix = "cache:testDB:order:id:"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Order, error)
		Update(ctx context.Context, data *Order) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderModel struct {
		sqlc.CachedConn
		table string
	}

	Order struct {
		Id                int64        `db:"id"`                   // 订单id
		CreatedAt         time.Time    `db:"created_at"`           // 创建时间
		UpdatedAt         time.Time    `db:"updated_at"`           // 更新时间
		DeletedAt         sql.NullTime `db:"deleted_at"`           // 删除时间
		UserId            int64        `db:"user_id"`              // 用户id
		OrderReceiveMesId int64        `db:"order_receive_mes_id"` // 收货信息表id
		Payment           float64      `db:"payment"`              // 实际付款金额,单位是元,保留两位小数
		PaymentType       int64        `db:"payment_type"`         // 支付类型,1-在线支付
		Postage           int64        `db:"postage"`              // 运费,单位是元
		Status            int64        `db:"status"`               // 订单状态:0-已取消-10-未付款，20-已付款，30-待发货 40-待收货，50-交易成功，60-交易关闭
		PaymentAt         sql.NullTime `db:"payment_at"`           // 支付时间
		SendAt            sql.NullTime `db:"send_at"`              // 发货时间
		CompletedAt       sql.NullTime `db:"completed_at"`         // 订单完成时间
	}
)

func newOrderModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) withSession(session sqlx.Session) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) Delete(ctx context.Context, id int64) error {
	testDBOrderIdKey := fmt.Sprintf("%s%v", cacheTestDBOrderIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, testDBOrderIdKey)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, id int64) (*Order, error) {
	testDBOrderIdKey := fmt.Sprintf("%s%v", cacheTestDBOrderIdPrefix, id)
	var resp Order
	err := m.QueryRowCtx(ctx, &resp, testDBOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) (sql.Result, error) {
	testDBOrderIdKey := fmt.Sprintf("%s%v", cacheTestDBOrderIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.OrderReceiveMesId, data.Payment, data.PaymentType, data.Postage, data.Status, data.PaymentAt, data.SendAt, data.CompletedAt)
	}, testDBOrderIdKey)
	return ret, err
}

func (m *defaultOrderModel) Update(ctx context.Context, data *Order) error {
	testDBOrderIdKey := fmt.Sprintf("%s%v", cacheTestDBOrderIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.OrderReceiveMesId, data.Payment, data.PaymentType, data.Postage, data.Status, data.PaymentAt, data.SendAt, data.CompletedAt, data.Id)
	}, testDBOrderIdKey)
	return err
}

func (m *defaultOrderModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTestDBOrderIdPrefix, primary)
}

func (m *defaultOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}
