// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authorMesFieldNames          = builder.RawFieldNames(&AuthorMes{})
	authorMesRows                = strings.Join(authorMesFieldNames, ",")
	authorMesRowsExpectAutoSet   = strings.Join(stringx.Remove(authorMesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authorMesRowsWithPlaceHolder = strings.Join(stringx.Remove(authorMesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	authorMesModel interface {
		Insert(ctx context.Context, data *AuthorMes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AuthorMes, error)
		FindOneByAuthor(ctx context.Context, author string) (*AuthorMes, error)
		Update(ctx context.Context, data *AuthorMes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAuthorMesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AuthorMes struct {
		Id           int64         `db:"id"`
		CreatedAt    sql.NullTime  `db:"created_at"`
		UpdatedAt    sql.NullTime  `db:"updated_at"`
		DeletedAt    sql.NullTime  `db:"deleted_at"`
		Author       string        `db:"author"`
		SignedPerson int64         `db:"signed_person"`
		Cash         sql.NullInt64 `db:"cash"`
	}
)

func newAuthorMesModel(conn sqlx.SqlConn) *defaultAuthorMesModel {
	return &defaultAuthorMesModel{
		conn:  conn,
		table: "`author_mes`",
	}
}

func (m *defaultAuthorMesModel) withSession(session sqlx.Session) *defaultAuthorMesModel {
	return &defaultAuthorMesModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`author_mes`",
	}
}

func (m *defaultAuthorMesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAuthorMesModel) FindOne(ctx context.Context, id int64) (*AuthorMes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", authorMesRows, m.table)
	var resp AuthorMes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthorMesModel) FindOneByAuthor(ctx context.Context, author string) (*AuthorMes, error) {
	var resp AuthorMes
	query := fmt.Sprintf("select %s from %s where `author` = ? limit 1", authorMesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, author)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthorMesModel) Insert(ctx context.Context, data *AuthorMes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, authorMesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Author, data.SignedPerson, data.Cash)
	return ret, err
}

func (m *defaultAuthorMesModel) Update(ctx context.Context, newData *AuthorMes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, authorMesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.Author, newData.SignedPerson, newData.Cash, newData.Id)
	return err
}

func (m *defaultAuthorMesModel) tableName() string {
	return m.table
}
