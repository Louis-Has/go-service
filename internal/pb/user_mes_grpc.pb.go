// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service/user_mes.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserMesModel_GetUserMes_FullMethodName  = "/testDb.user_mes_model/get_user_mes"
	UserMesModel_PostUserMes_FullMethodName = "/testDb.user_mes_model/post_user_mes"
)

// UserMesModelClient is the client API for UserMesModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMesModelClient interface {
	GetUserMes(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*User, error)
	PostUserMes(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type userMesModelClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMesModelClient(cc grpc.ClientConnInterface) UserMesModelClient {
	return &userMesModelClient{cc}
}

func (c *userMesModelClient) GetUserMes(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserMesModel_GetUserMes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMesModelClient) PostUserMes(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserMesModel_PostUserMes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMesModelServer is the server API for UserMesModel service.
// All implementations must embed UnimplementedUserMesModelServer
// for forward compatibility
type UserMesModelServer interface {
	GetUserMes(context.Context, *ReqID) (*User, error)
	PostUserMes(context.Context, *User) (*User, error)
	mustEmbedUnimplementedUserMesModelServer()
}

// UnimplementedUserMesModelServer must be embedded to have forward compatible implementations.
type UnimplementedUserMesModelServer struct {
}

func (UnimplementedUserMesModelServer) GetUserMes(context.Context, *ReqID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMes not implemented")
}
func (UnimplementedUserMesModelServer) PostUserMes(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserMes not implemented")
}
func (UnimplementedUserMesModelServer) mustEmbedUnimplementedUserMesModelServer() {}

// UnsafeUserMesModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMesModelServer will
// result in compilation errors.
type UnsafeUserMesModelServer interface {
	mustEmbedUnimplementedUserMesModelServer()
}

func RegisterUserMesModelServer(s grpc.ServiceRegistrar, srv UserMesModelServer) {
	s.RegisterService(&UserMesModel_ServiceDesc, srv)
}

func _UserMesModel_GetUserMes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMesModelServer).GetUserMes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMesModel_GetUserMes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMesModelServer).GetUserMes(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMesModel_PostUserMes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMesModelServer).PostUserMes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMesModel_PostUserMes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMesModelServer).PostUserMes(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMesModel_ServiceDesc is the grpc.ServiceDesc for UserMesModel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMesModel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testDb.user_mes_model",
	HandlerType: (*UserMesModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_user_mes",
			Handler:    _UserMesModel_GetUserMes_Handler,
		},
		{
			MethodName: "post_user_mes",
			Handler:    _UserMesModel_PostUserMes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/user_mes.proto",
}
