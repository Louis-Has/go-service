// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service/product.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductModel_GetProductModel_FullMethodName = "/testDb.product_model/get_product_model"
)

// ProductModelClient is the client API for ProductModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductModelClient interface {
	GetProductModel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ViewProduct, error)
}

type productModelClient struct {
	cc grpc.ClientConnInterface
}

func NewProductModelClient(cc grpc.ClientConnInterface) ProductModelClient {
	return &productModelClient{cc}
}

func (c *productModelClient) GetProductModel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ViewProduct, error) {
	out := new(ViewProduct)
	err := c.cc.Invoke(ctx, ProductModel_GetProductModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductModelServer is the server API for ProductModel service.
// All implementations must embed UnimplementedProductModelServer
// for forward compatibility
type ProductModelServer interface {
	GetProductModel(context.Context, *Empty) (*ViewProduct, error)
	mustEmbedUnimplementedProductModelServer()
}

// UnimplementedProductModelServer must be embedded to have forward compatible implementations.
type UnimplementedProductModelServer struct {
}

func (UnimplementedProductModelServer) GetProductModel(context.Context, *Empty) (*ViewProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductModel not implemented")
}
func (UnimplementedProductModelServer) mustEmbedUnimplementedProductModelServer() {}

// UnsafeProductModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductModelServer will
// result in compilation errors.
type UnsafeProductModelServer interface {
	mustEmbedUnimplementedProductModelServer()
}

func RegisterProductModelServer(s grpc.ServiceRegistrar, srv ProductModelServer) {
	s.RegisterService(&ProductModel_ServiceDesc, srv)
}

func _ProductModel_GetProductModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductModelServer).GetProductModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductModel_GetProductModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductModelServer).GetProductModel(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductModel_ServiceDesc is the grpc.ServiceDesc for ProductModel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductModel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testDb.product_model",
	HandlerType: (*ProductModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_product_model",
			Handler:    _ProductModel_GetProductModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/product.proto",
}
