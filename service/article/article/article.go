// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package article

import (
	"context"

	"go-service/service/pb/art"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Article    = art.Article
	ArticleId  = art.ArticleId
	ArticleRes = art.ArticleRes
	NilRes     = art.NilRes

	ArticleZrpcClient interface {
		GetServer(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleRes, error)
		PostServer(ctx context.Context, in *Article, opts ...grpc.CallOption) (*ArticleRes, error)
		PutServer(ctx context.Context, in *ArticleRes, opts ...grpc.CallOption) (*ArticleRes, error)
		DeleteServer(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*NilRes, error)
	}

	defaultArticleZrpcClient struct {
		cli zrpc.Client
	}
)

func NewArticleZrpcClient(cli zrpc.Client) ArticleZrpcClient {
	return &defaultArticleZrpcClient{
		cli: cli,
	}
}

func (m *defaultArticleZrpcClient) GetServer(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*ArticleRes, error) {
	client := art.NewArticleClient(m.cli.Conn())
	return client.GetServer(ctx, in, opts...)
}

func (m *defaultArticleZrpcClient) PostServer(ctx context.Context, in *Article, opts ...grpc.CallOption) (*ArticleRes, error) {
	client := art.NewArticleClient(m.cli.Conn())
	return client.PostServer(ctx, in, opts...)
}

func (m *defaultArticleZrpcClient) PutServer(ctx context.Context, in *ArticleRes, opts ...grpc.CallOption) (*ArticleRes, error) {
	client := art.NewArticleClient(m.cli.Conn())
	return client.PutServer(ctx, in, opts...)
}

func (m *defaultArticleZrpcClient) DeleteServer(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*NilRes, error) {
	client := art.NewArticleClient(m.cli.Conn())
	return client.DeleteServer(ctx, in, opts...)
}
