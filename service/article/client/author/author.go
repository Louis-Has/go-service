// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package author

import (
	"context"

	"go-service/service/pb/art"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Article      = art.Article
	ArticleRes   = art.ArticleRes
	AuthorMes    = art.AuthorMes
	AuthorMesRes = art.AuthorMesRes
	AuthorTotal  = art.AuthorTotal
	Id           = art.Id
	NeedLived    = art.NeedLived
	NilRes       = art.NilRes
	TotalRes     = art.TotalRes

	Author interface {
		GetAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AuthorMesRes, error)
		GetAuthorTotal(ctx context.Context, in *NeedLived, opts ...grpc.CallOption) (*TotalRes, error)
	}

	defaultAuthor struct {
		cli zrpc.Client
	}
)

func NewAuthor(cli zrpc.Client) Author {
	return &defaultAuthor{
		cli: cli,
	}
}

func (m *defaultAuthor) GetAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AuthorMesRes, error) {
	client := art.NewAuthorClient(m.cli.Conn())
	return client.GetAuthor(ctx, in, opts...)
}

func (m *defaultAuthor) GetAuthorTotal(ctx context.Context, in *NeedLived, opts ...grpc.CallOption) (*TotalRes, error) {
	client := art.NewAuthorClient(m.cli.Conn())
	return client.GetAuthorTotal(ctx, in, opts...)
}
