// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package order_service

import (
	"context"

	"go-service/internal/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Id             = __.Id
	OrderDetailRes = __.OrderDetailRes
	OrderReceive   = __.OrderReceive
	OrderReq       = __.OrderReq
	UserOrderAll   = __.UserOrderAll
	WholeOrder     = __.WholeOrder

	OrderService interface {
		PostOrderMes(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*WholeOrder, error)
		GetOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WholeOrder, error)
		GetUserOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserOrderAll, error)
	}

	defaultOrderService struct {
		cli zrpc.Client
	}
)

func NewOrderService(cli zrpc.Client) OrderService {
	return &defaultOrderService{
		cli: cli,
	}
}

func (m *defaultOrderService) PostOrderMes(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*WholeOrder, error) {
	client := __.NewOrderServiceClient(m.cli.Conn())
	return client.PostOrderMes(ctx, in, opts...)
}

func (m *defaultOrderService) GetOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WholeOrder, error) {
	client := __.NewOrderServiceClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrderService) GetUserOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserOrderAll, error) {
	client := __.NewOrderServiceClient(m.cli.Conn())
	return client.GetUserOrder(ctx, in, opts...)
}
