// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service/article.proto

package art

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Article_GetServer_FullMethodName    = "/article.article/getServer"
	Article_PostServer_FullMethodName   = "/article.article/postServer"
	Article_PutServer_FullMethodName    = "/article.article/putServer"
	Article_DeleteServer_FullMethodName = "/article.article/deleteServer"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	GetServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ArticleRes, error)
	PostServer(ctx context.Context, in *Article, opts ...grpc.CallOption) (*ArticleRes, error)
	PutServer(ctx context.Context, in *ArticleRes, opts ...grpc.CallOption) (*ArticleRes, error)
	DeleteServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) GetServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ArticleRes, error) {
	out := new(ArticleRes)
	err := c.cc.Invoke(ctx, Article_GetServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) PostServer(ctx context.Context, in *Article, opts ...grpc.CallOption) (*ArticleRes, error) {
	out := new(ArticleRes)
	err := c.cc.Invoke(ctx, Article_PostServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) PutServer(ctx context.Context, in *ArticleRes, opts ...grpc.CallOption) (*ArticleRes, error) {
	out := new(ArticleRes)
	err := c.cc.Invoke(ctx, Article_PutServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DeleteServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Article_DeleteServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility
type ArticleServer interface {
	GetServer(context.Context, *Id) (*ArticleRes, error)
	PostServer(context.Context, *Article) (*ArticleRes, error)
	PutServer(context.Context, *ArticleRes) (*ArticleRes, error)
	DeleteServer(context.Context, *Id) (*Empty, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (UnimplementedArticleServer) GetServer(context.Context, *Id) (*ArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedArticleServer) PostServer(context.Context, *Article) (*ArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostServer not implemented")
}
func (UnimplementedArticleServer) PutServer(context.Context, *ArticleRes) (*ArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutServer not implemented")
}
func (UnimplementedArticleServer) DeleteServer(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetServer(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_PostServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).PostServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_PostServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).PostServer(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_PutServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).PutServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_PutServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).PutServer(ctx, req.(*ArticleRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DeleteServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DeleteServer(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getServer",
			Handler:    _Article_GetServer_Handler,
		},
		{
			MethodName: "postServer",
			Handler:    _Article_PostServer_Handler,
		},
		{
			MethodName: "putServer",
			Handler:    _Article_PutServer_Handler,
		},
		{
			MethodName: "deleteServer",
			Handler:    _Article_DeleteServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/article.proto",
}

const (
	Author_GetAuthor_FullMethodName      = "/article.author/getAuthor"
	Author_GetAuthorTotal_FullMethodName = "/article.author/getAuthorTotal"
)

// AuthorClient is the client API for Author service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorClient interface {
	GetAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AuthorMesRes, error)
	GetAuthorTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TotalRes, error)
}

type authorClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorClient(cc grpc.ClientConnInterface) AuthorClient {
	return &authorClient{cc}
}

func (c *authorClient) GetAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AuthorMesRes, error) {
	out := new(AuthorMesRes)
	err := c.cc.Invoke(ctx, Author_GetAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorClient) GetAuthorTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TotalRes, error) {
	out := new(TotalRes)
	err := c.cc.Invoke(ctx, Author_GetAuthorTotal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServer is the server API for Author service.
// All implementations must embed UnimplementedAuthorServer
// for forward compatibility
type AuthorServer interface {
	GetAuthor(context.Context, *Id) (*AuthorMesRes, error)
	GetAuthorTotal(context.Context, *Empty) (*TotalRes, error)
	mustEmbedUnimplementedAuthorServer()
}

// UnimplementedAuthorServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorServer struct {
}

func (UnimplementedAuthorServer) GetAuthor(context.Context, *Id) (*AuthorMesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedAuthorServer) GetAuthorTotal(context.Context, *Empty) (*TotalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorTotal not implemented")
}
func (UnimplementedAuthorServer) mustEmbedUnimplementedAuthorServer() {}

// UnsafeAuthorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServer will
// result in compilation errors.
type UnsafeAuthorServer interface {
	mustEmbedUnimplementedAuthorServer()
}

func RegisterAuthorServer(s grpc.ServiceRegistrar, srv AuthorServer) {
	s.RegisterService(&Author_ServiceDesc, srv)
}

func _Author_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Author_GetAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServer).GetAuthor(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Author_GetAuthorTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServer).GetAuthorTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Author_GetAuthorTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServer).GetAuthorTotal(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Author_ServiceDesc is the grpc.ServiceDesc for Author service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Author_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.author",
	HandlerType: (*AuthorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAuthor",
			Handler:    _Author_GetAuthor_Handler,
		},
		{
			MethodName: "getAuthorTotal",
			Handler:    _Author_GetAuthorTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/article.proto",
}
