syntax = "v1"

type Article {
	Type    *string `json:"type,optional"`
	Content *string `json:"content,optional"`
	Author  string  `json:"author"`
}

type ArticleRes {
	Article
	Id int64 `json:"id"`
}

type PathID {
	Id int64 `path:"id"`
}

@server(
	prefix: /article
	group : article
)
// 定义一个名称为 user 的服务
service art {
	@doc "获取用户信息"
	@handler getArticle
	get /:id (PathID) returns (ArticleRes)

	@doc "新建用户信息"
	@handler postArticle
	post / (Article) returns (ArticleRes)

	@doc "更改用户信息"
	@handler putArticle
	put / (ArticleRes) returns (ArticleRes)

	@doc "删除用户信息"
	@handler deleteArticle
	delete /:id (PathID) returns ()
}

type AuthorContent {
	Author       string `json:"author"`
	SignedPerson *bool  `json:"signedPerson,optional"`
	Cash         *int64 `json:"cash,optional"`
}

type AuthorRes {
	Authors []AuthorContent `json:"authors"`
	Id      int64           `json:"id"`
}

type AuthorTotal {
	Id       int64  `json:"id"`
	Author   string `json:"author"`
	Deleted  bool   `json:"deleted"`
	MesCount int64  `json:"mesCount"`
	CashSum  int64  `json:"cashSum"`
}

type NeedLived {
	Lived bool `json:"lived,optional"`
}

type TotalRes {
	AuthorTotals []AuthorTotal `json:"authorTotals"`
}

@server (
	prefix: /author
	group : author
)

service art {
	@doc "获取作者信息"
	@handler getAuthor
	get /:id (PathID) returns (AuthorRes)

	@doc "获取所有article统计信息"
	@handler getArticleTotal
	get /total (NeedLived) returns (TotalRes)
}